/**
 * @license
 * Copyright (c) 2014 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
 */

/**
 * This file contains the main flow for the bot. i.e. discovering and checking
 * out repos, noticing if they've changed, and pushing those changes back to
 * github if needed.
 *
 * The actual changes that the bot does are in cleanup-passes.
 */


'use strict';

const fs = require('fs');
const GitHubApi = require("github-cache");
const promisify = require("promisify-node");
const nodegit = require('nodegit');
const path = require('path');
const ProgressBar = require('progress');
const rimraf = require('rimraf');
const cleanup = require('./cleanup-passes');


let GITHUB_TOKEN;

try {
  GITHUB_TOKEN = fs.readFileSync('token', 'utf8').trim();
} catch(e) {
  console.error(
`
You need to create a github token and place it in a file named 'token'.
The token only needs the 'public repos' permission.

Generate a token here:   https://github.com/settings/tokens
`
  );
  process.exit(1);
}

const github = connectToGithub();


function getRepos() {
  const per_page = 100;
  const repos = [];
  const getFromOrg = promisify(github.repos.getFromOrg);
  return Promise.resolve().then(() => {
    function getReposFromPageOnward(page) {
      return getFromOrg({org: 'PolymerElements', per_page, page}).then((results) => {
        repos.push.apply(repos, results);
        if (results.length === per_page) {
          return getReposFromPageOnward(page + 1);
        }
        return repos;
      });
    }

    return getReposFromPageOnward(0);
  });
}

function promiseAllWithProgress(promises, label) {
  const progressBar = new ProgressBar(`${label} [:bar] :percent`, {
    total: promises.length});
  for (const promise of promises) {
    promise.then(() => progressBar.tick(), () => progressBar.tick());
  }
  return Promise.all(promises);
}

// Call this as fast as you want, each time it returns a new promise that will
// resolve only after a delay, and only after every other promise returned by
// rateLimit has resolved.
let rateLimit = (function() {
  let previousPromise = Promise.resolve();
  return function rateLimit(delay) {
    let curr = previousPromise.then(function() {
      return new Promise((resolve) => {
        setTimeout(resolve, delay);
      });
    });
    previousPromise = curr;
    return curr;
  };
})();


function checkoutNewBranch(repo, branchName) {
  return repo.getHeadCommit().then((commit) => {
    return nodegit.Branch.create(repo, branchName, commit, false);
  }).then((branch) => {
    return repo.checkoutBranch(branch);
  });
}

let elementsPushed = 0;
const allowedPushes = 100;
function pushIsAllowed() {
  if (elementsPushed < allowedPushes) {
    elementsPushed++;
    return true;
  }
  return false;
}

function pushChanges(element, localBranchName, assignee) {
  if (!element.dirty) {
    return Promise.resolve();
  }
  if (!pushIsAllowed()) {
    return Promise.resolve();
  }
  let remoteBranchName = 'master';
  if (element.needsReview) {
    remoteBranchName = localBranchName;
  }
  const pushPromise = Promise.resolve()
      .then(pushBranch.bind(null, element, localBranchName, remoteBranchName));
  if (element.needsReview) {
    return pushPromise.then(createPullRequest.bind(
          null, element, localBranchName, 'master', assignee));
  }
  return pushPromise;
}

function pushBranch(element, localBranchName, remoteBranchName) {
  return element.repo.getRemote("origin")
    .then(function(remote) {
      return remote.push(
        ["refs/heads/" + localBranchName + ":refs/heads/" + remoteBranchName],
        {
          callbacks: {
            credentials: function() {
              return nodegit.Cred.userpassPlaintextNew(
                  GITHUB_TOKEN, "x-oauth-basic");
            }
          }
        }
      );
    });
}

function createPullRequest(element, head, base, assignee) {
  const user = element.ghRepo.owner.login;
  const repo = element.ghRepo.name;
  return rateLimit(5000).then(() => {
    return promisify(github.pullRequests.create)({
      title: 'Automatic cleanup!',
      user, repo, head, base,
    });
  }).then((pr) => {
    return promisify(github.issues.edit)({
      number: pr.number,
      user, repo,
      assignee,
      labels: ['autogenerated'],
    });
  });
}

function connectToGithub() {
  const github = new GitHubApi({
      version: "3.0.0",
      protocol: "https",
      cachedb: './.github-cachedb',
      validateCache: true
  });

  github.authenticate({
    type: 'oauth',
    token: GITHUB_TOKEN
  });
  return github;
}



let user;

console.log('Discovering repos in PolymerElements...');


Promise.resolve().then(() => {
  return promisify(rimraf)('repos');
}).then(() => {
  fs.mkdirSync('repos');
}).then(() => {
  // We're going to need the github user later, better get it now.
  return promisify(github.user.get)({});
}).then((userResponse) => {
  user = userResponse;
}).then(() => {
  return getRepos();
}).then((ghRepos) => {
  const promises = [];

  for (const ghRepo of ghRepos) {
    promises.push(rateLimit(100).then(() => {
      const targetDir = path.join('repos', ghRepo.name);
      let repoPromise;
      if (cleanup.existsSync(targetDir)) {
        repoPromise = nodegit.Repository.open(targetDir);
      } else {
        repoPromise = nodegit.Clone.clone(ghRepo.clone_url, targetDir, null);
      }
      return repoPromise.then((repo) => ({
          repo: repo, dir: targetDir, ghRepo: ghRepo}));
      })
    );
  }

  return promiseAllWithProgress(promises, 'Checking out repos...');
}).then((elements) => {
  const promises = [];

  const excludes = new Set([
    'repos/style-guide',
    'repos/test-all',
    'repos/ContributionGuide',

    // Temporary, because of a weird unknown 403?:
    'repos/paper-listbox',
  ]);

  const branchName = 'auto-cleanup';
  for (const element of elements) {
    if (excludes.has(element.dir)) {
      continue;
    }
    promises.push(
      Promise.resolve()
        .then(checkoutNewBranch.bind(null, element.repo, branchName))
        .then(cleanup.bind(null, element))
        .then(pushChanges.bind(null, element, branchName, user.login))
        .catch((err) => {
          throw new Error(`Error updating ${element.dir}:\n${err}`);
        })
    );
  }
  return promiseAllWithProgress(promises, 'Cleaning...');
}).then(() => {
  if (elementsPushed === 0) {
    console.log('No changes needed!');
  } else {
    console.log(`Successfully pushed to ${elementsPushed} repos.`);
  }
}, function(err) {
  console.error(`\n\n${err}`);
  process.exit(1);
});
